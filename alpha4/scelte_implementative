Scelte progettuali ed eventuali modifiche

Parte PCB
Abbiamo scelto di utilizzare le API di Linux per l'utilizzo e la gestione di liste, le quali specifiche sono all'interno del file "listx.h". Le funzioni qui descritte permettono una gestione semplice e trasparente di liste ed alberi. Viene innanzitutto richiamata la funzione INIT_LIST_HEAD che realizza una lista di processi vuota e pienamente funzionale con sentinella. 
Tutti i processi vengono messi in coda alla lista creata grazie ad un ciclo iterativo di MAXPROC ed alla funzione list_add_tail, utilizzata spesso ed uniformemente nel codice del progetto.
Nella funzione allocPcb, che rimuove un elemento dalla lista pcbFree inizializzondone tutti i campi a 0, si é deciso di inizializzare tutti i registri del processore utilizzato, specificandone la differenziazione di target con un "ifdef". Le specifhe dei due processori, rispettivamente uarm e umps, sono state prese da uARMtypes.h e da types.h. Per quanto riguarda umps, é utilizzata anche la costante STATE_GPR_LEN, che determina la quantitá di registri General Purpose, ed un ciclo iterativo per inizializzare a 0 i suddetti registri.
La funzione mkEmptyProcQ si è deciso di dichiararla come void per attinenza ai file forniteci, come risulta in pcb.h, sebbene nel PDF di spiegazione del progetto sia dichiarata come pcb_t*.
Nella funzione insertProcQ, che inserisce un processo in una coda con prioritá, in maniera decrescente, si é deciso di utilizzare una variabile booleana chiamata "flag" per capire con semplicitá se e quando il nuovo processo é stato messo in coda. Se il flag rimane a 0, vuol dire che il processo ha prioritá minima.
Tutto il codice é opportunamente commentato per essere quando piú chiaro e leggibile possibile.

Parte ASL

Abbiamo largamente utilizzato le funzioni e macro presente in listx perchè molto utili e non abbiamo avuto necessità di modificarle 
perchè presenti in varianti più che sufficienti ai nostri scopi. Le strutture dati utilizzate sono attinenti alle richieste della consegna. E' presente infatti un vettore di semafori e due sentinelle di tipo list head per i semafori liberi ed i semafori utilizzati. 

E' di interesse notare come la gestione delle chiavi associate al semaforo venga determinata esternamente all'implementazione dei 
semafori e delle relative funzioni. Essi vengono infatti inizializzati con chiave NULL e successivamente una volta allocati presenteranno
l'identificativo richiesto dall'esterno e presente come parametro della funzione insertBlocked. Quando un semaforo diventa libero viene reinserito nella lista apposita e riprende l'etichetta NULL fino a che non viene riattivato. In questa implementazione i semafori sono
intercambiabili tra di loro tranne in fase di attività.

Non sono  stesso.state prese altre scelte implementative degne di nota. Abbiamo (Ho) cercato di racchiudere all'interno di una funzione ausiliaria alcune azioni ripetute all'interno delle funzioni outBlocked e removeBlocked ma ho successivamente abbandonato l'idea a causa di una leggera eterogeneità delle stesse, per il ridotto risparmio di codice ed in vigore di una maggiore linearità e chiarezza dello
