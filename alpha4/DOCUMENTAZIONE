Documentazione relativa alla fase 1 del Bikaya Project di Federico De Marchi, Stefano Sgarzi, Manuel Vannini

Breve spiegazione generale delle scelte implementative e delle implementazioni non banali di alcune funzioni.

#####

Si è scelto di mantenere l'API suggerita di listx.h per la gestione delle liste e non sono state effettuate modifiche alle strutture e funzioni della specifica.

Non sono state aggiunte funzioni ausiliare strettamente relative alla gestione di pcb e asl, ma si è scelto di usare una breve implementazione della funzione C memset() chiamata ownmemset() e definita in auxfun.h, per evitare l'uso di librerie aggiuntive.

#PCB#

Come suggerito nella specifica la memoria dei processi è allocata dichiarando un vettore globale HIDDEN e la testa della lista dei processi è dichiata anch'essa globale HIDDEN.
L'inizializzazione della lista di processi liberi avviene richiamando la funzione INIT_LIST_HEAD e tutti i processi del vettore vengono inseriti in coda con un ciclo iterativo di MAXPROC usando la funzione list_add_tail. Viene generalmente usata per uniformità l'aggiunta in coda all'interno di tutte le funzioni, sia nella visuale a lista, che nella visuale ad albero.

Nella funzione allocPcb, si inizializzano tutti i campi di pcb_t a 0/NULL e tutti i campi della struct state_t p_s a 0 utilizzando la funzione ownmemset, in modo da non dover differenziare tra le diverse implementazioni dei processori.

La funzione mkEmptyProcQ è dichiarata come void in attinenza ai file forniti come risulta in pcb.h, sebbene nel PDF di spiegazione del progetto sia dichiarata come pcb_t*.

Nella funzione insertProcQ, che inserisce un processo in una coda con prioritá in maniera decrescente, si é deciso di utilizzare una variabile booleana flag per capire se e quando il nuovo processo è stato messo in coda. Se nell'iterazione il flag rimane a FALSE, vuol dire che il processo ha prioritá minima.

Nelle funzioni removeProcQ e removeChild, si memorizza l'elemento da rimuovere prima di rimuoverlo con list_del, perché quest'ultima non restituisce l'elemento rimosso.

Nella funzione outChild, si itera sul list_head p_sib usando list_for_each perché non è immediatamente data in input la testa della lista su cui iterare, mentre in outProcQ si itera usando list_for_each_entry.


#ASL#

Anche qui come suggerito dalla specifica la memoria è allocata dichiarando un vettore globale HIDDEN e due sentinelle per le liste dei semafori liberi in uso anch'esse globali HIDDEN.